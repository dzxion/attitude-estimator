close all
clear all
clc

global ToRad ToDeg;
ToDeg = 180/pi;ToRad = pi/180;

addpath('algorithm','rotation');
path = 'data/¾²Ö¹60s.csv';
data = csvread(path, 1, 1);
data = data.';%'

Gyro_x = data(1, :);
Gyro_y = data(2, :);
Gyro_z = data(3, :);

Acc_x = data(4, :);
Acc_y = data(5, :);
Acc_z = data(6, :);

roll_encoder = data(7, :);
pitch_encoder = data(8, :);
yaw_encoder = data(9, :);

Fc_RollAngle = data(10, :);
Fc_PitchAngle = data(11, :);
Fc_YawAngle = data(12, :);

Fc_RollRate = data(13, :);
Fc_PitchRate = data(14, :);
Fc_YawRate = data(15, :);

% N = length(data);
% qEstC_f = zeros(N, 4);
% 
% for k=1:N
%     qEstC = Comp_acc(Gyro_x);
%     qEstC_f(k,:) = qEstC;
% end

fs = 250;
gyro = ([Gyro_x;Gyro_y;Gyro_z]/32.8)*ToRad;
acc = [Acc_x;Acc_y;Acc_z]/8192;
acc_filted = Filter_LP_1(acc);

qaccfilted = quat_acc(acc_filted);
qacc = quat_acc(acc);
[qEstC,biasC] = Comp_acc(fs,gyro,acc);

euleracc = qua2eul(qacc)*ToDeg;
eulerqEstC = qua2eul(qEstC)*ToDeg;
euleraccfilted = qua2eul(qEstC)*ToDeg;

% rmpath('algorithm','rotation');
